// 顶层模块
CHIP Decoder201801673 {
    IN A, B, C, D;
    OUT a, b, c, d, e, f, g;

    PARTS:
    a(A = A, B = B, C = C, D = D, a = a);
    b(A = A, B = B, C = C, D = D, b = b);
    c(A = A, B = B, C = C, D = D, c = c);
    d(A = A, B = B, C = C, D = D, d = d);
    e(A = A, B = B, C = C, D = D, e = e);
    f(A = A, B = B, C = C, D = D, f = f);
    g(A = A, B = B, C = C, D = D, g = g);
}

// 模块 a
CHIP a {
    IN A, B, C, D;
    OUT a;

    PARTS:
    Not(in = A, out = NOTA);
    Not(in = B, out = NOTB);
    Not(in = C, out = NOTC);
    Not(in = D, out = NOTD);

    And(a = NOTB, b = NOTD, out = P1);
    And(a = C, b = NOTD, out = P2);
    And(a = A, b = B, out = P3);
    And(a = A, b = C, out = P4);

    Or(a = P1, b = P2, out = P12);
    Or(a = P3, b = P4, out = P34);
    Or(a = P12, b = P34, out = a);
}

// 模块 b
CHIP b {
    IN A, B, C, D;
    OUT b;

    PARTS:
    Not(in = A, out = NOTA);
    Not(in = B, out = NOTB);
    Not(in = C, out = NOTC);
    Not(in = D, out = NOTD);

    And(a = NOTB, b = NOTD, out = P1);
    And(a = NOTB, b = NOTC, out = P2);

    And(a = NOTA, b = C, out = NOTAc);
    And(a = NOTAc, b = D, out = P3);

    And(a = A, b = NOTC, out = ANOTC);
    And(a = ANOTC, b = D, out = P4);

    And(a = NOTA, b = NOTC, out = NOTAC);
    And(a = NOTAC, b = NOTD, out = P5);

    Or5(a = P1, b = P2, c = P3, d = P4, e = P5, out = b);
}

// 模块 c
CHIP c {
    IN A, B, C, D;
    OUT c;

    PARTS:
    Not(in = A, out = NOTA);
    Not(in = B, out = NOTB);
    Not(in = C, out = NOTC);
    Not(in = D, out = NOTD);

    And(a = NOTB, b = NOTD, out = P1);
    And(a = B, b = C, out = P2);
    And(a = A, b = NOTD, out = P3);
    And(a = NOTA, b = C, out = P4);

    And(a = A, b = NOTB, out = NOTBa);
    And(a = NOTBa, b = NOTC, out = P5);

    And(a = NOTA, b = B, out = NOTAb);
    And(a = NOTAb, b = D, out = P6);

    Or5(a = P1, b = P2, c = P3, d = P4, e = P5, out = P7);
    Or(a = P6, b = P7, out = c);
}

// 模块 d
CHIP d {
    IN A, B, C, D;
    OUT d;

    PARTS:
    Not(in = A, out = NOTA);
    Not(in = B, out = NOTB);
    Not(in = C, out = NOTC);
    Not(in = D, out = NOTD);

    And(a = A, b = NOTB, out = P1);
    And(a = NOTC, b = D, out = P2);
    And(a = NOTA, b = B, out = P3);
    And(a = NOTA, b = D, out = P4);
    And(a = NOTB, b = NOTC, out = P5);

    Or5(a = P1, b = P2, c = P3, d = P4, e = P5, out = d);
}

// 模块 e
CHIP e {
    IN A, B, C, D;
    OUT e;

    PARTS:
    Not(in = A, out = NOTA);
    Not(in = B, out = NOTB);
    Not(in = C, out = NOTC);
    Not(in = D, out = NOTD);

    And(a = NOTB, b = C, out = P1);
    And(a = C, b = NOTD, out = P2);
    And(a = A, b = NOTB, out = P3);
    And(a = A, b = D, out = P4);

    And(a = NOTC, b = NOTA, out = out);
    And(a = B, b = out, out = P5);

    Or5(a = P1, b = P2, c = P3, d = P4, e = P5, out = e);
}

// 模块 f
CHIP f {
    IN A, B, C, D;
    OUT f;

    PARTS:
    Not(in = A, out = notA);
    Not(in = B, out = notB);
    Not(in = C, out = notC);
    Not(in = D, out = notD);

    And(a = notC, b = notD, out = notCnotD);

    And(a = notA, b = B, out = notAB);
    And(a = notAB, b = notC, out = notABnotC);

    And(a = B, b = notD, out = BnotD);
    And(a = A, b = C, out = AC);
    And(a = A, b = notB, out = AnotB);

    Or(a = notCnotD, b = notABnotC, out = one);
    Or(a = BnotD, b = AC, out = BnotDorAC);
    Or(a = BnotDorAC, b = AnotB, out = two);
    Or(a = one, b = two, out = f);
}

// 模块 g
CHIP g {
    IN A, B, C, D;
    OUT g;

    PARTS:
    Not(in = A, out = NOTA);
    Not(in = B, out = NOTB);
    Not(in = C, out = NOTC);
    Not(in = D, out = NOTD);

    And(a = A, b = B, out = AB);
    And(a = AB, b = NOTD, out = P1);

    And(a = NOTB, b = NOTC, out = NOTBC);
    And(a = NOTBC, b = NOTD, out = P2);

    And(a = B, b = NOTC, out = BNOTC);
    And(a = BNOTC, b = D, out = P3);

    And(a = NOTA, b = C, out = CNOTA);
    And(a = CNOTA, b = NOTD, out = P4);

    And(a = A, b = NOTB, out = ANOTB);
    And(a = ANOTB, b = D, out = P5);

    And(a = NOTA, b = NOTB, out = NOTAB);
    And(a = NOTAB, b = C, out = P6);

    Or5(a = P1, b = P2, c = P3, d = P4, e = P5, out = P7);
    Or(a = P6, b = P7, out = g);
}

// 模块 Or5
CHIP Or5 {
    IN a, b, c, d, e;
    OUT out;

    PARTS:
    Or(a = a, b = b, out = ab);
    Or(a = ab, b = c, out = abc);
    Or(a = abc, b = d, out = abcd);
    Or(a = abcd, b = e, out = out);
}
